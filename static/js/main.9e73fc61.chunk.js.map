{"version":3,"sources":["components/RenderUsers.js","App.js","reportWebVitals.js","index.js"],"names":["RandomUsers","state","loading","users","fetch","response","json","data","this","setState","results","console","log","color","textWhite","map","user","src","picture","large","name","first","last","email","login","uuid","React","Component","App","inputRef","useRef","id","type","value","ref","className","onClick","e","current","RenderUsers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAkEeA,E,4MA7DdC,MAAQ,CACPC,SAAS,EACTC,MAAO,I,0LAIK,yC,SACWC,MADX,0C,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OAENC,KAAKC,SAAS,CAAEN,MAAOI,EAAKG,QAASR,SAAS,IAC9CS,QAAQC,IAAIL,EAAKG,S,qIAIjB,OAAIF,KAAKP,MAAMC,QACP,+CAGHM,KAAKP,MAAME,MAKf,8BACC,eAAC,IAAD,WACC,cAAC,IAAD,CAAcU,MAAM,gBAAgBC,WAAS,EAA7C,SACC,+BACC,6BACC,yCAED,6BACC,yCAED,6BACC,wCAED,6BACC,8CAKFN,KAAKP,MAAME,MAAMY,KAAI,SAACC,GAAD,OACrB,cAAC,IAAD,UACC,+BACC,6BACC,qBAAKC,IAAKD,EAAKE,QAAQC,UAExB,6BAAKH,EAAKI,KAAKC,QACf,6BAAKL,EAAKI,KAAKE,OACf,6BAAKN,EAAKO,YAPOP,EAAKQ,MAAMC,cAxB1B,uD,GArBgBC,IAAMC,WC8BjBC,MA9Bf,WACC,IAAMC,EAAWC,mBAQjB,OACC,gCACC,sBAAKC,GAAG,SAAR,UACC,wCACA,uBACA,uBAAOC,KAAK,WAAWD,GAAG,SAASE,MAAM,OACzC,uBAAOF,GAAG,KAAV,kBACA,uBAAOC,KAAK,WAAWD,GAAG,SAASE,MAAM,OACzC,uBAAOF,GAAG,KAAV,kBACA,uBACA,uBAAOA,GAAG,YAAYC,KAAK,OAAOE,IAAKL,IACvC,wBAAQE,GAAG,YAAYI,UAAU,2BAA2BC,QAjB/D,SAAyBC,GACXR,EAASS,QAAQL,MAE9BJ,EAASS,QAAQL,MAAQ,MAcvB,uBAKD,cAACM,EAAD,QCjBYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCIdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.9e73fc61.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\r\n\r\nclass RandomUsers extends React.Component {\r\n\tstate = {\r\n\t\tloading: true,\r\n\t\tusers: []\r\n\t};\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst url = 'https://randomuser.me/api/?results=100';\r\n\t\tconst response = await fetch(url);\r\n\t\tconst data = await response.json();\r\n\r\n\t\tthis.setState({ users: data.results, loading: false });\r\n\t\tconsole.log(data.results);\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.loading) {\r\n\t\t\treturn <div> Loading... </div>;\r\n\t\t}\r\n\r\n\t\tif (!this.state.users) {\r\n\t\t\treturn <div> No Users Data! </div>;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<MDBTable>\r\n\t\t\t\t\t<MDBTableHead color=\"primary-color\" textWhite>\r\n\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<h3>Photo</h3>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<h3>First</h3>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<h3>Last</h3>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t<th>\r\n\t\t\t\t\t\t\t\t<h3>Email</h3>\r\n\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t</MDBTableHead>\r\n\r\n\t\t\t\t\t{this.state.users.map((user) => (\r\n\t\t\t\t\t\t<MDBTableBody key={user.login.uuid}>\r\n\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t<img src={user.picture.large} />\r\n\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t<td>{user.name.first}</td>\r\n\t\t\t\t\t\t\t\t<td>{user.name.last}</td>\r\n\t\t\t\t\t\t\t\t<td>{user.email}</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</MDBTableBody>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</MDBTable>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default RandomUsers;\r\n","import { useRef } from 'react';\n\nimport RenderUsers from './components/RenderUsers';\n\nfunction App() {\n\tconst inputRef = useRef();\n\n\tfunction handleAddFilter(e) {\n\t\tconst info = inputRef.current.value;\n\n\t\tinputRef.current.value = null;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div id=\"search\">\n\t\t\t\t<h1>Filter</h1>\n\t\t\t\t<br />\n\t\t\t\t<input type=\"checkbox\" id=\"check1\" value=\"AZ\" />\n\t\t\t\t<label id=\"c1\"> A-Z</label>\n\t\t\t\t<input type=\"checkbox\" id=\"check2\" value=\"ZA\" />\n\t\t\t\t<label id=\"c2\"> Z-A</label>\n\t\t\t\t<br />\n\t\t\t\t<input id=\"inputText\" type=\"text\" ref={inputRef} />\n\t\t\t\t<button id=\"searchBtn\" className=\"btn btn-secondary btn-sm\" onClick={handleAddFilter}>\n\t\t\t\t\tSearch\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<RenderUsers />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}